
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<section id="interestsSection">
    <div class="progress rounded-0" role="progressbar" aria-label="Basic example" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
        <div class="progress-bar" style="width: 100%"></div>
      </div>

      <div class="container">
        <div class="row">
            <h1 class="fs-1 text-center mt-5">İlgi Alanlarınız</h1>

            <div class="col-lg-4 d-flex flex-column justify-content-start align-items-center">
                    <h4 class="my-5 fs-4">İlgi alanınızı bulamadınız mı? Arayın.</h4>

                    <label class="fs-4 mb-2" for="searchinterests">İlgi alanlarını ara</label>
                <input type="text" class=" form-control" id="searchinterests" />
                <div id="interestsResults"></div>

                <p id="subCategoryContainer" class="d-flex flex-wrap mt-5 justify-content-center align-items-center sub-category-buttons">
                    <% let remaining = 10; %>
                    <% subCategories.forEach((category) => { %>
                        <% category.forEach((subCategory) => { %>
                            <% if (remaining > 0) { %>
                                <button class="btn btn-outline-info me-2 mb-2" data-bs-toggle="button"><%= subCategory %></button>
                                <% remaining--; %>
                            <% } %>
                        <% }); %>
                    <% }); %>
                </p>
                <button id="showMoreBtn" class="btn btn-primary mb-3 mt-5 mx-auto" onclick="showMoreCategories()">Daha Fazla Gör</button>
                
            </div>

            <div id="categoryContainerParent" style="padding-top:4.5rem;" class="col-lg-7 d-flex flex-column justify-content-start align-items-center">
                <div id="selectedCategoriesContainer">
                </div>
            </div>
            <div class="col-lg-1 d-flex">
                <div class="row d-flex">
                    <div class="col align-self-start d-flex">
                        <button type="button" id="saveButton" class="btn d-flex align-items-center justify-content-center btn-secondary px-3 py-2">Kaydet</button>
                    </div>
                </div>
                
            </div>
        </div>
      </div>
</section>

<!----------------------------------------------------- INTERESTS.JS SCRIPTS -------------------------------------------------------- -->

<script>
    let categoryIndex = 2; // Gösterilen kategorilerin indexi
let subCategoryIndex = 0; // Gösterilen alt kategorilerin indexi
const subCategories = JSON.parse('<%- JSON.stringify(subCategories) %>');

function showMoreCategories() {
    const subCategoryContainer = document.getElementById('subCategoryContainer');
    subCategoryContainer.innerHTML = ''; // Mevcut alt kategorileri temizle

    // İlgili kategorinin alt kategorilerini ekle
    let remaining = 10;
    while (remaining > 0) {
        if (categoryIndex >= subCategories.length) {
            categoryIndex = 0; // Kategori indexi maksimuma ulaştıysa sıfıra dön
        }
        const currentCategory = subCategories[categoryIndex];
        const currentSubCategories = currentCategory.slice(subCategoryIndex, subCategoryIndex + remaining);
        currentSubCategories.forEach(subCategory => {
            const button = document.createElement('button');
            button.className = 'btn btn-outline-info me-2 mb-2';
            button.setAttribute('data-bs-toggle', 'button');
            button.setAttribute('data-category', subCategory.toLowerCase()); // Kategori bilgisini ekle
            button.textContent = subCategory;
            subCategoryContainer.appendChild(button);
        });
        remaining -= currentSubCategories.length;
        subCategoryIndex = 0; // Her döngüde subCategoryIndex'i sıfırla
        categoryIndex++;
    }
    synchronizeButtonsWithSearch(); // Butonları arama sonuçlarıyla senkronize et
}

function synchronizeButtonsWithSearch() {
    const selectedCategories = Array.from(document.querySelectorAll('.cancelFilterButtons')).map(button => button.textContent.trim().toLowerCase());
    const subCategoryButtons = Array.from(document.querySelectorAll('#subCategoryContainer button')).map(button => button.textContent.trim().toLowerCase());
    
    // Seçilen kategori butonlarını subCategoryContainer içindeki butonlarla senkronize et
    selectedCategories.forEach(selectedCategory => {
        const matchingButton = subCategoryButtons.find(button => button === selectedCategory);
        if (matchingButton) {
            const subCategoryButton = document.querySelector(`#subCategoryContainer button:not([aria-pressed="true"]):not(.active)[data-bs-toggle="button"]:not([aria-pressed="false"])[data-category="${matchingButton}"]`);
            if (subCategoryButton) {
                subCategoryButton.setAttribute('aria-pressed', 'true');
                subCategoryButton.classList.add('active');
            }
        }
    });
}
</script>


<script>
    function moveCategoryContent(button) {
    let buttonContext;
    if(button instanceof HTMLElement) {
        buttonContext = button.innerHTML;
    } else if (button !== undefined) {
        buttonContext = button;
    }
    const selectedCategoriesContainer = document.querySelector("#selectedCategoriesContainer");

    const checkIfExists = Array.from(selectedCategoriesContainer.querySelectorAll('button')).find(button => button.textContent.trim() === buttonContext);

    if (!checkIfExists) {
        const createButton = document.createElement("button");
        createButton.className = "btn cancelFilterButtons me-2 mb-2";
        createButton.textContent = buttonContext;
        selectedCategoriesContainer.appendChild(createButton);

        createButton.addEventListener('click', () => {
        createButton.remove(); // Butonu kaldır
        updateSubCategoryButtons(); // subCategoryContainer içindeki butonları güncelle

        
        const selectedItemsCount = selectedCategoriesContainer.querySelectorAll('button').length;
        let selectionsParagraph = categoryContainerParent.querySelector('p');
    if (!selectionsParagraph) {
        // Yoksa yeni bir p etiketi oluştur ve categoryContainerParent'a ekle
        selectionsParagraph = document.createElement('p');
        selectionsParagraph.className = "fs-3 mb-5";
        selectionsParagraph.textContent = `Seçimleriniz(${selectedItemsCount})`
        categoryContainerParent.prepend(selectionsParagraph);
    } else {
        // Eğer p etiketi varsa, içeriğini güncelle
        selectionsParagraph.textContent = `Seçimleriniz(${selectedItemsCount})`
    }

        // İçinde eleman yoksa "Seçimleriniz" etiketini kaldır
            
        // SAĞ KATEGORI CONTAINER BUTON İÇERİĞİNE TIKLAYARAK SİLME İŞLEMİNDE P ETIKETINI KALDIR
        if (selectedCategoriesContainer.querySelectorAll('button').length === 0) {
            const selectionsParagraph = categoryContainerParent.querySelector('p');
            if (selectionsParagraph) {
                selectionsParagraph.remove();
            }
        }
    });
       
    } else {
        checkIfExists.remove(); // Butonu kaldır
        updateSubCategoryButtons(); // subCategoryContainer içindeki butonları güncelle
    }

    const categoryContainerParent = document.querySelector("#categoryContainerParent");


if (selectedCategoriesContainer.querySelectorAll('button').length > 0) {
   const selectedItemsCount = selectedCategoriesContainer.querySelectorAll('button').length;
    // Eğer p etiketi zaten varsa, içeriğini güncelle
    let selectionsParagraph = categoryContainerParent.querySelector('p');
    if (!selectionsParagraph) {
        // Yoksa yeni bir p etiketi oluştur ve categoryContainerParent'a ekle
        selectionsParagraph = document.createElement('p');
        selectionsParagraph.className = "fs-3 mb-5";
        selectionsParagraph.textContent = `Seçimleriniz(${selectedItemsCount})`
        categoryContainerParent.prepend(selectionsParagraph);
    } else {
        // Eğer p etiketi varsa, içeriğini güncelle
        selectionsParagraph.textContent = `Seçimleriniz(${selectedItemsCount})`
    }
} else {
    // İçinde eleman yoksa "Seçimleriniz" etiketini kaldır
           // SOL KATEGORI CONTAINER BUTON İÇERİĞİNE TIKLAYARAK SİLME İŞLEMİNDE P ETIKETINI KALDIR
    const selectionsParagraph = categoryContainerParent.querySelector('p');
    if (selectionsParagraph) {
        selectionsParagraph.remove();
    }
}

}

// subCategoryContainer içindeki butonların durumunu güncelle
function updateSubCategoryButtons() {
    const subCategoryButtons = document.querySelectorAll('.sub-category-buttons button');
    subCategoryButtons.forEach(subButton => {
        const selectedCategoriesContainer = document.querySelector("#selectedCategoriesContainer");
        const checkIfExists = Array.from(selectedCategoriesContainer.querySelectorAll('button')).find(button => button.textContent.trim() === subButton.textContent.trim());
        if (checkIfExists) {
            subButton.classList.add('active');
            subButton.setAttribute('aria-pressed', 'true');
        } else {
            subButton.classList.remove('active');
            subButton.setAttribute('aria-pressed', 'false');
        }
    });
}

function addClickListenersToButtons() {
    const buttons = document.querySelectorAll('.sub-category-buttons button');
    buttons.forEach(button => {
        button.addEventListener('click', () => {
            moveCategoryContent(button);
            updateSubCategoryButtons();
        });
    });
}

const showMoreBtn = document.getElementById('showMoreBtn');
showMoreBtn.addEventListener('click', () => {
    addClickListenersToButtons();
});

window.addEventListener("load", () => {
    addClickListenersToButtons();
   
});

if (document.readyState !== 'loading') {
    addClickListenersToButtons();
} 

const interestsResults = document.getElementById("interestsResults");

// İlgi alanları sonuçlarının içindeki her bir div veya p elementine tıklama olay dinleyicisi ekle
interestsResults.addEventListener("click", function(event) {
    if (event.target.tagName === "DIV") {
        moveCategoryContent(event.target.innerHTML);
        updateSubCategoryButtons();
    }
});
</script>

<script src="../js-interests/submit.js"></script>
<script src="../js-interests/search.js"></script>
<script src="bundle.js"></script>


<% if (user) { %>
    <script>
      const button = document.querySelector('.userButtonDesktop');
      button.addEventListener('click', () => {
          if (button.classList.contains('show')) {
              button.classList.add('custom-style');
          } else {
             button.classList.remove('custom-style');
          }
      });
    </script> 
  <% } %>
  
  <script src="https://kit.fontawesome.com/fbc606679a.js" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
  <script>
  
    let globalToken = undefined;
      function onSubmitCallback(token) {
          globalToken = token;
          
            }
  
      document.getElementById("getLoginForm").addEventListener("submit", function(event) {
    
        if(!globalToken) {
            event.preventDefault();
        } 

      });
  
      document.addEventListener("DOMContentLoaded", function() {
      const form = document.getElementById('getLoginForm');
      const submitBtn = document.querySelector('.loginButton');
      const popoverContainer = document.getElementById('popoverContainer');
  
      form.addEventListener('submit', function() {
  
  
        
          let popoverContent = '';
          if (!globalToken) {
              popoverContent = 'Lütfen Doğrulama İşlemini Yapınız';
          }
  
          
          const popover = new bootstrap.Popover(popoverContainer, {
              content: popoverContent,
              trigger: 'manual',
              container: popoverContainer,
          });
          popover.show();
  
          document.addEventListener('click', function(event) {
  
  if (!popoverContainer.contains(event.target) && !submitBtn.contains(event.target)) {
      popover.hide();
  }
  });
  
  
  submitBtn.addEventListener('click', function(event) {
  
  event.stopPropagation(); 
  if (popover) {
  popover.hide();
  }
  });
      });
  
     
  });
  
      
                
  </script>
  
  
  <script src="https://www.google.com/recaptcha/api.js" async defer></script>
  <script>
    const popoverTriggerList = document.querySelectorAll('[data-bs-toggle="popover"]')
  const popoverList = [...popoverTriggerList].map(popoverTriggerEl => new bootstrap.Popover(popoverTriggerEl))
  </script>
  </body>
  </html>

